
# Temporaire
def player_testing():
    return {Player("A", "1", "01/01/01", "M", "100", 1000), Player("B", "2", "02/02/02", "M", "95", 1001),
            Player("C","3", "03/03/03","M","103",1002),
            Player("D", "4", "04/04/04", "F", "140", 1003), Player("E", "5", "05/05/05", "M", "65", 1004),
            Player("F", "6", "06/06/06", "F", "233", 1005), Player("G", "7", "07/07/07", "M", "230", 1006),
            Player("H", "8", "08/08/08", "F", "324", 1007)}

# Fin temporaire

        # with open("db.json") as z:
        #     dictData = json.load(z)
        #     aa = []
        #     bb = []
        # for j in (dictData['players'].values()):
        #     aa.append(j.values())
        # print(dictData['players'].values())

        from datetime import datetime

# datetime object containing current date and time
now = datetime.now()

print("now =", now)

# dd/mm/YY H:M:S
dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
print("date and time =", dt_string)

"""Genère la liste de match du round 1"""
a = mm.generate_matches_first_round(players_list_per_rank)
for i in a:
    menu.display_match(i)
tm = TournamentManager()
tournament = tm.create_tournament()
menu.display_tournament(tournament)
menu.get_input(menu="Verifier la saisie, ajouter à la base ? (O/N)")

 def create_odd_even_list(self):
        """Genere une liste de nombre pair et une liste de nombre imppair"""
        num_list = []
        for number in range(MAXPLAYER):
            num_list.append(number)
        even_list = []
        odd_list= []
        for type_num in num_list:
            if type_num%2 == 0:
                even_list.append(type_num)
            else:
                odd_list.append(type_num)
        return even_list, odd_list

#   elif choice == "5":
#      self.clear_player_table()
#     choice = menu.get_input(menu.main_menu())

  def menu_add_players_to_db(self):
        """ Ajoute des joueurs à la database"""
        choice = "O"
        while choice in ["O", "o"]:
            if choice == "O" or "o":
                player = pm.create_player_to_db()
                menu.display_player(player)
                choice = menu.get_input(menu="Verifier la saisie, ajouter à la base ? (O/N)")
                if choice in ["O", "o"]:
                    serialized_player = pm.serialize_player(player)
                    self.add_data_to_db(serialized_player, players_table)
                    print("\nJoueur ajouté avec succès !\n")
                else:
                    print("\nRetour au menu principal\n")
            if choice in ["N", "n"]:
                print("\nRetour au menu principal\n")
            choice = menu.get_input("Ajouter un autre joueur ? (O/N)\n")
        print("\nRetour au menu principal\n")

Index: modules/MainManager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import modules.View\r\nfrom modules.MatchManager import MatchManager\r\nfrom modules.PlayerManager import PlayerManager\r\nfrom modules.RoundManager import RoundManager\r\nfrom modules.TournamentManager import TournamentManager\r\nfrom modules.View import Menus\r\nfrom tinydb import TinyDB\r\n\r\n\"\"\"Liste des types de chronomètres standardisés\"\"\"\r\nTIME_CONTROL = modules.View.TIME_CONTROL\r\n\r\n\"\"\" Déclaration de la base de données et des tables \"\"\"\r\ndb = TinyDB(\"db.json\", sort_keys=True, indent=4, separators=(',', ': '))\r\nplayers_table = db.table(\"players\")\r\ntournaments_table = db.table(\"tournaments\")\r\nrounds_table = db.table('rounds')\r\nmatch_table = db.table(\"matchs\")\r\n\r\n\"\"\"Déclare l'objet \"Menus\" from View.py \"\"\"\r\nmenu = Menus()\r\n\"\"\"Déclare l'objet \"Tournament Manager\" from TournamentManager.py \"\"\"\r\ntm = TournamentManager()\r\n\"\"\"Déclare l'objet \"PlayerManager\" from PlayerManager.py \"\"\"\r\npm = PlayerManager()\r\n\"\"\"Déclare l'objet \"Roundmanager\" from Roundmanager.py \"\"\"\r\nrm = RoundManager()\r\n\"\"\"Déclare l'objet \"Matchmanager\" from matchmanager.py \"\"\"\r\nmm = MatchManager()\r\n\r\n\r\nclass MainManager:\r\n\r\n    def start(self):\r\n        \"Lance le menu de départ\"\r\n        \"\"\"Message de bienvenue\"\"\"\r\n        menu.hello()\r\n        \"\"\"Menu principal\"\"\"\r\n        choice = menu.get_input(menu.main_menu())\r\n        while choice != \"9\":\r\n            while choice not in [\"1\", \"2\", \"3\", \"4\", \"9\"]:\r\n                print(\"\\n Choix incorrect !\\n\")\r\n                choice = menu.get_input(menu.main_menu())\r\n            if choice == \"1\":\r\n                \"\"\"instancie et affiche un tournoi\"\"\"\r\n                tournament = tm.create_tournament()\r\n                menu.display_tournament(tournament)\r\n                \"\"\"instancie et affiche une liste de 8 joueurs instanciés triée par rang\"\"\"\r\n                players_list = tm.select_8_players(players_table)\r\n                \"\"\" Instancie les rounds\"\"\"\r\n                round_list = rm.create_round(tournament, tournament.rounds)\r\n                \"\"\"Ajoute les rounds à la liste de round du tournoi\"\"\"\r\n                tournament.round_list = round_list\r\n                \"\"\"Génère la liste des 4 match du 1er Round\"\"\"\r\n                match_list = mm.create_matches_first_round(players_list)\r\n                \"\"\"Run les 4 matchs du Round \"\"\"\r\n                match_list_result = mm.run_match(match_list)\r\n                \"\"\"Ajoute la liste des match avec resultats au round \"\"\"\r\n                round_list[0].match_list = match_list_result\r\n                \"\"\"\"Cloture le round par ajout de l'heure de fin\"\"\"\r\n                menu.display_round_validation(menu.get_input(\"Valider la fin du round en cours ?) O/N\"))\r\n                round_list[0].end_time = rm.timestamp()\r\n                \"\"\"Boucle pour les N round suivant le premier\"\"\"\r\n                i = 1\r\n                while i < len(round_list):\r\n                    match_list = mm.create_matches_next_round(players_list)\r\n                    match_list_result = mm.run_match(match_list)\r\n                    round_list[i].match_list = match_list_result\r\n                    menu.display_round_validation(menu.get_input(\"Valider la fin du round en cours ?) O/N\"))\r\n                    round_list[i].end_time = rm.timestamp()\r\n                    i = i + 1\r\n                \"\"\"Ajoute le tournoi terminé à la table tournament\"\"\"\r\n                self.add_data_to_db(tm.serialize_tournament(tournament, round_list, match_list), tournaments_table)\r\n                choice = menu.get_input(menu.main_menu())\r\n            elif choice == \"2\":\r\n                self.menu_show_players()\r\n                choice = menu.get_input(menu.main_menu())\r\n            elif choice == \"3\":\r\n                self.menu_add_players_to_db()\r\n                choice = menu.get_input(menu.main_menu())\r\n            elif choice == \"4\":\r\n                \"\"\" Consulter des informations \"\"\"\r\n                choice = menu.get_input(menu.main_menu())\r\n                pass\r\n            elif choice == \"9\":\r\n                exit(\"Fin\")\r\n        \"\"\" Quitter le programme \"\"\"\r\n        exit(\"Fin\")\r\n\r\n\r\n    def menu_add_players_to_db(self):\r\n        \"\"\" Ajoute des joueurs à la database\"\"\"\r\n        choice = True\r\n        while choice is True:\r\n            player = pm.create_player_to_db()\r\n            menu.display_player(player)\r\n            choice = menu.yes_or_no(menu=\"Verifier la saisie, ajouter à la base ?\")\r\n            if choice is True:\r\n                serialized_player = pm.serialize_player(player)\r\n                self.add_data_to_db(serialized_player, players_table)\r\n                print(\"\\nJoueur ajouté avec succès !\\n\")\r\n                choice = menu.yes_or_no(\"Ajouter un autre joueur ?\")\r\n                if choice is False:\r\n                    break\r\n            elif choice is False:\r\n                choice = menu.yes_or_no(\"Ajouter un autre joueur ?\")\r\n                if choice is False:\r\n                    break\r\n        else:\r\n            print(\"\\nRetour au menu principal\\n\")\r\n\r\n\r\n\r\n    @staticmethod\r\n    def menu_show_players():\r\n        \"\"\"Liste les joueurs depuis la DB\"\"\"\r\n        return menu.display_players_from_db(pm.unserialize_all_players(players_table))\r\n\r\n    @staticmethod\r\n    def clear_player_table():\r\n        players_table.truncate()  # clear the table\r\n        return print(\"\\nTable Players effacée !\\n\")\r\n\r\n    @staticmethod\r\n    def add_data_to_db(serialized_data, table):\r\n        return table.insert(serialized_data)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/MainManager.py b/modules/MainManager.py
--- a/modules/MainManager.py	(revision a5ec2c45667e5e92551369dd156f4634da107f9e)
+++ b/modules/MainManager.py	(date 1665086456647)
@@ -86,7 +86,6 @@
         """ Quitter le programme """
         exit("Fin")
 
-
     def menu_add_players_to_db(self):
         """ Ajoute des joueurs à la database"""
         choice = True
@@ -108,8 +107,6 @@
         else:
             print("\nRetour au menu principal\n")
 
-
-
     @staticmethod
     def menu_show_players():
         """Liste les joueurs depuis la DB"""
